name: lint/python

# https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_call
on:
  workflow_call:
    inputs:
      micromamba-version:
        type: string
        description: 'The `micromamba` version to use.'
        required: false
        default: '1.5.1-0'
      python-version:
        type: string
        description: 'The Python version to use.'
        required: false
        default: '3.11'
      isort-version:
        type: string
        description: 'The `isort` version to use.'
        required: false
        default: '5.12.0'
      ruff-version:
        type: string
        description: 'The `ruff` version to use.'
        required: false
        default: '0.1.3'


concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true


jobs:
  lint:
    name: Lint Python
    runs-on: ubuntu-latest
    steps:
      - id: show_debug_info
        name: Show Debug Info
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          # Show Debug Info
          echo "::group::User Info"
          id
          echo "::endgroup::"
          echo "::group::GitHub Context"
          echo "${GITHUB_CONTEXT}"
          echo "::endgroup::"
          echo "::group::Environment Variables"
          unset GITHUB_CONTEXT
          env | sort
          echo "::endgroup::"
          echo "::group::Git Info"
          which git
          git --version
          echo "::endgroup::"
      - id: setup_micromamba
        # https://github.com/mamba-org/setup-micromamba
        name: Create Python Environment
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: ${{ inputs.micromamba-version }}
          cache-environment: true
          condarc: |
            channels:
              - conda-forge
          environment-name: lint
          create-args: >-
            python=${{ inputs.python-version }}
            isort=${{ inputs.isort-version }}
            ruff=${{ inputs.ruff-version }}
      - id: checkout_source
        name: Checkout Source
        uses: actions/checkout@v3
      - id: lint_python
        name: Lint Python Code
        shell: bash -l {0}
        run: |
          # Run linters
          set -euox pipefail
          set +e
          ruff check --fix ./src
          exitcode=$?
          set -e
          ruff format --preview ./src
          isort ./src
          filename="lint-src.patch"
          git diff --no-color > "${filename}"
          size=$(stat --printf="%s" "${filename}")
          if [ $exitcode -eq 0 ] && [ $size -eq 0 ]; then
            echo "::notice::No lint detected!"
            echo "has_lint=false" >> "${GITHUB_OUTPUT}"
            set +e
            exit 0
          else
            echo "has_lint=true" >> "${GITHUB_OUTPUT}"
            echo "patch_file=${filename}" >> "${GITHUB_OUTPUT}"
            echo "Use the below commands to apply the patch:" >> "${GITHUB_STEP_SUMMARY}"
            echo '```bash' >> "${GITHUB_STEP_SUMMARY}"
            echo "rm -f $filename \\" >> "${GITHUB_STEP_SUMMARY}"
            echo "&& gh run download $GITHUB_RUN_ID -n $filename \\" >> "${GITHUB_STEP_SUMMARY}"
            echo "&& git stash \\" >> "${GITHUB_STEP_SUMMARY}"
            echo "&& git apply $filename \\" >> "${GITHUB_STEP_SUMMARY}"
            echo "&& git commit -am 'Fix lint' && git push \\" >> "${GITHUB_STEP_SUMMARY}"
            echo "&& git stash pop" >> "${GITHUB_STEP_SUMMARY}"
            echo '```' >> "${GITHUB_STEP_SUMMARY}"
            echo '```diff' >> "${GITHUB_STEP_SUMMARY}"
            cat "${filename}" >> "${GITHUB_STEP_SUMMARY}"
            echo '```' >> "${GITHUB_STEP_SUMMARY}"
            exit 1
          fi
      - id: upload_patch
        name: Upload Patch File
        if: failure() && steps.lint_python.outputs.has_lint == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.lint_python.outputs.patch_file }}
          path: ${{ steps.lint_python.outputs.patch_file }}
