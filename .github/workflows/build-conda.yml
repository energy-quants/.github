name: build/conda

# https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows#workflow_call
on:
  workflow_call:
    inputs:
      micromamba-version:
        type: string
        description: 'The `micromamba` version to use.'
        required: false
        default: '1.5.1-0'
      python-version:
        type: string
        description: 'The Python versiond to test against.'
        required: false
        default: '["3.10", "3.11"]'
      devtools-version:
        type: string
        description: 'The `eq-devtools` version to use.'
        required: false
        default: '>=0.5.0'


jobs:
  debug:
    name: Show Debug Info
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      - id: show_debug_info
        name: Show Debug Info
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          # Show Debug Info
          echo "::group::User Info"
          id
          echo "::endgroup::"
          echo "::group::GitHub Context"
          echo "${GITHUB_CONTEXT}"
          echo "::endgroup::"
          echo "::group::Environment Variables"
          unset GITHUB_CONTEXT
          env | sort
          echo "::endgroup::"
          echo "::group::Git Info"
          which git
          git --version
          echo "::endgroup::"


  build_package:
    name: Build Package
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.build_package.outputs.packages }}
      package_info: ${{ steps.build_package.outputs.package_info }}
    steps:
      - id: setup_micromamba
        name: Create Python Environment
        # https://github.com/mamba-org/setup-micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: ${{ inputs.micromamba-version }}
          cache-environment: true
          condarc: |
            channels:
              - conda-forge
              - energy-quants
          environment-name: build
          create-args: >-
            eq-devtools${{ inputs.devtools-version }}
            ruamel.yaml>=0.17.32,<0.18

      - id: checkout_source
        name: Checkout Source
        # https://github.com/actions/checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ (github.head_ref == '' && github.ref_name) || github.event.after }}
          fetch-depth: 0

      - id: build_package
        name: Build Package
        shell: bash -l {0}
        run: |
          set -euox pipefail
          devtool --version
          git describe --long
          devtool conda build
          echo "### Installing the Package" >> "${GITHUB_STEP_SUMMARY}"
          echo "Use the below commands to download the package:" >> "${GITHUB_STEP_SUMMARY}"
          echo '```bash' >> "${GITHUB_STEP_SUMMARY}"
          echo "rm -rf .build/conda/dist" >> "${GITHUB_STEP_SUMMARY}"
          echo "gh run download $GITHUB_RUN_ID -n conda-channel --dir .build/conda/dist" >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          python <<SCRIPT
          import json
          import os
          from pathlib import Path
          dist = Path('.build/conda/dist')
          filepaths = [
              pth.relative_to(dist) for pth
              in dist.rglob('**/*.conda')
          ]
          packages = {}
          for filepath in filepaths:
              package, version, buildstr = filepath.stem.rsplit('-', maxsplit=2)
              packages[package] = {
                  'package': package,
                  'version': version,
                  'buildstr': buildstr,
                  'filepath': filepath.as_posix(),
              }

          print(f"{packages=}")
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"packages={json.dumps(list(packages))}\n")
              fh.write(f"package_info={json.dumps(packages)}\n")
          SCRIPT

      - id: show_recipe
        name: Show Rendered Recipe
        shell: bash -l {0}
        run: |
          set -euo pipefail
          printf "\n<hr>\n\n" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Conda Recipe" >> "${GITHUB_STEP_SUMMARY}"
          printf '\n<details>\n' >> "${GITHUB_STEP_SUMMARY}"
          echo "<summary><tt><b>recipe.yaml</b></tt></summary>" >> "${GITHUB_STEP_SUMMARY}"
          printf '\n```yaml\n' >> "${GITHUB_STEP_SUMMARY}"
          cat .build/conda/recipe/recipe.yaml >> "${GITHUB_STEP_SUMMARY}"
          echo '```' >> "${GITHUB_STEP_SUMMARY}"
          printf '\n</details>\n' >> "${GITHUB_STEP_SUMMARY}"

      - id: publish_recipe
        name: Publish Conda Recipe
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: recipe.yaml
          path: .build/conda/recipe/recipe.yaml

      - id: show_package_contents
        name: Show Package Contents
        shell: bash -l {0}
        run: |
          set -euo pipefail
          printf "\n<hr>\n\n" >> "${GITHUB_STEP_SUMMARY}"
          echo "### Package Contents" >> "${GITHUB_STEP_SUMMARY}"
          for filepath in  $(find "./.build/conda/dist" -type f -name "*.conda"); do
            filename=$(basename "${filepath}" '.conda')
            echo "::group::${filename}"
            cph extract --prefix='${{ runner.temp }}' "${filepath}"
            printf '\n<details>\n' >> "${GITHUB_STEP_SUMMARY}"
            echo "<summary><tt><b>${filename}</b></tt></summary>" >> "${GITHUB_STEP_SUMMARY}"
            printf '\n```\n' >> "${GITHUB_STEP_SUMMARY}"
            tree -aC "${{ runner.temp }}/${filename}" | tee -a "${GITHUB_STEP_SUMMARY}"
            echo '```' >> "${GITHUB_STEP_SUMMARY}"
            printf '\n</details>\n' >> "${GITHUB_STEP_SUMMARY}"
            echo "::endgroup::"
          done

      - id: publish_conda_package
        name: Publish Conda Package
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: conda-channel
          path: .build/conda/dist

  test_package:
    name: Test Package
    needs: build_package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.build_package.outputs.packages) }}
        python: ${{ fromJson(inputs.python-version) }}
    steps:
      - id: setup_micromamba
        name: Create Python Environment
        # https://github.com/mamba-org/setup-micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          micromamba-version: ${{ inputs.micromamba-version }}
          cache-environment: true
          condarc: |
            channels:
              - conda-forge
              - energy-quants
          environment-name: test
          create-args: >-
            python=${{ matrix.python }}

      - id: checkout_source
        name: Checkout Source
        # https://github.com/actions/checkout
        uses: actions/checkout@v4

      - id: download_artifact
        name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: conda-channel
          path: conda-local

      - id: install_test_dependencies
        name: Install Dependencies
        shell: bash -l {0}
        run: |
          set -euox pipefail
          package_info='${{ needs.build_package.outputs.package_info }}'
          echo "${package_info}"
          version=$(echo "${package_info}" | jq -r '."${{ matrix.package }}".version')
          set +x
          micromamba install \
            -c ./conda-local \
            -f requirements.d/pypi/test.txt \
            "${{ matrix.package }}=${version}" \
            --yes

      - id: test_package
        name: Test Package
        shell: bash -l {0}
        run: |
          # pytest
          set -euox pipefail
          pyver=$(echo 'py${{ matrix.python }}' | tr -d '.')
          path=".build/conda/test/${{ matrix.package }}/${pyver}/"
          pytest \
            --self-contained-html \
            --html="${path}/html/test-report.html" \
            --junit-xml="${path}/test-results.xml" \
            --cov-report=html:"${path}/html/cov" \
            --cov-report=xml:"${path}/coverage.xml"

      - id: publish_test_results
        name: Publish Test Results
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: .build/conda/test/

      - id: create_lockfile
        name: Create Lockfile
        shell: bash -l {0}
        run: |
          set -euo pipefail
          micromamba remove --yes $(cat requirements.d/pypi/test.txt | tr '\n' ' ')
          path=$(echo 'lockfile/${{ matrix.package }}/py${{ matrix.python }}' | tr -d '.')
          mkdir -p "${path}"
          micromamba env export --explicit | tee "${path}/conda.lock"

      - id: publish_lockfile
        name: Publish Lockfile
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: conda.lock
          path: "./lockfile"
